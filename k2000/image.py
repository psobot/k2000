import json

from typing import List
import numpy as np
from PIL import Image
from PIL import ImageDraw


x, y = 240, 64
header_height = 8
DEFAULT_KEYMAP_WIDTH = (0, 95)

GLYPH_SIZE = (5, 7)
WHITE = (254, 250, 175, 255)  # "#f8f5b2"
BLACK = (37, 141, 242, 255)  # "#2579f2"
UPSCALE_BACKGROUND = (41, 150, 255, 255)

DEFAULT_UPSCALE = 24
DEFAULT_DOWNSCALE = 4

# Generated by hand from https://www.pentacom.jp/pentacom/bitfontmaker2/
FONT = json.loads(
    """
{
    "35":[0,0,0,0,0,40,40,124,40,124,40,40,0,0,0,0],
    "37":[0,0,0,0,0,12,76,32,16,8,100,96,0,0,0,0],
    "38":[0,0,0,0,0,24,36,20,8,84,36,88,0,0,0,0],
    "39":[0,0,0,0,0,48,32,16,0,0,0,0,0,0,0,0],
    "40":[0,0,0,0,0,32,16,8,8,8,16,32,0,0,0,0],
    "41":[0,0,0,0,0,8,16,32,32,32,16,8,0,0,0,0],
    "42":[0,0,0,0,0,0,16,84,56,84,16,0,0,0,0,0],
    "43":[0,0,0,0,0,0,16,16,124,16,16,0,0,0,0,0],
    "44":[0,0,0,0,0,0,0,0,0,24,16,8,0,0,0,0],
    "45":[0,0,0,0,0,0,0,0,124,0,0,0,0,0,0,0],
    "46":[0,0,0,0,0,0,0,0,0,0,24,24,0,0,0,0],
    "47":[0,0,0,0,0,0,64,32,16,8,4,0,0,0,0,0],
    "48":[0,0,0,0,0,56,68,100,84,76,68,56,0,0,0,0],
    "49":[0,0,0,0,0,16,24,16,16,16,16,56,0,0,0,0],
    "50":[0,0,0,0,0,56,68,64,32,16,8,124,0,0,0,0],
    "51":[0,0,0,0,0,124,32,16,32,64,68,56,0,0,0,0],
    "52":[0,0,0,0,0,32,48,40,36,124,32,32,0,0,0,0],
    "53":[0,0,0,0,0,124,4,60,64,64,68,56,0,0,0,0],
    "54":[0,0,0,0,0,48,8,4,60,68,68,56,0,0,0,0],
    "55":[0,0,0,0,0,124,64,32,16,16,16,16,0,0,0,0],
    "56":[0,0,0,0,0,56,68,68,56,68,68,56,0,0,0,0],
    "57":[0,0,0,0,0,56,68,68,120,64,32,24,0,0,0,0],
    "58":[0,0,0,0,0,0,24,24,0,24,24,0,0,0,0,0],
    "60":[0,0,0,0,0,32,16,8,4,8,16,32,0,0,0,0],
    "61":[0,0,0,0,0,0,0,124,0,124,0,0,0,0,0,0],
    "62":[0,0,0,0,0,8,16,32,64,32,16,8,0,0,0,0],
    "63":[0,0,0,0,0,56,68,64,32,16,0,16,0,0,0,0],
    "65":[0,0,0,0,0,56,68,68,68,124,68,68,0,0,0,0],
    "66":[0,0,0,0,0,60,72,72,56,72,72,60,0,0,0,0],
    "67":[0,0,0,0,0,56,68,4,4,4,68,56,0,0,0,0],
    "68":[0,0,0,0,0,60,72,72,72,72,72,60,0,0,0,0],
    "69":[0,0,0,0,0,124,4,4,60,4,4,124,0,0,0,0],
    "70":[0,0,0,0,0,124,4,4,60,4,4,4,0,0,0,0],
    "71":[0,0,0,0,0,56,68,4,100,68,68,120,0,0,0,0],
    "72":[0,0,0,0,0,68,68,68,124,68,68,68,0,0,0,0],
    "73":[0,0,0,0,0,56,16,16,16,16,16,56,0,0,0,0],
    "74":[0,0,0,0,0,112,32,32,32,32,36,24,0,0,0,0],
    "75":[0,0,0,0,0,68,36,20,12,20,36,68,0,0,0,0],
    "76":[0,0,0,0,0,4,4,4,4,4,4,124,0,0,0,0],
    "77":[0,0,0,0,0,68,108,84,84,68,68,68,0,0,0,0],
    "78":[0,0,0,0,0,68,76,76,84,100,100,68,0,0,0,0],
    "79":[0,0,0,0,0,56,68,68,68,68,68,56,0,0,0,0],
    "80":[0,0,0,0,0,60,68,68,60,4,4,4,0,0,0,0],
    "81":[0,0,0,0,0,56,68,68,68,84,36,88,0,0,0,0],
    "82":[0,0,0,0,0,60,68,68,60,20,36,68,0,0,0,0],
    "83":[0,0,0,0,0,56,68,4,56,64,68,56,0,0,0,0],
    "84":[0,0,0,0,0,124,16,16,16,16,16,16,0,0,0,0],
    "85":[0,0,0,0,0,68,68,68,68,68,68,56,0,0,0,0],
    "86":[0,0,0,0,0,68,68,68,68,68,40,16,0,0,0,0],
    "87":[0,0,0,0,0,68,68,68,84,84,108,68,0,0,0,0],
    "88":[0,0,0,0,0,68,68,40,16,40,68,68,0,0,0,0],
    "89":[0,0,0,0,0,68,68,68,40,16,16,16,0,0,0,0],
    "90":[0,0,0,0,0,124,64,32,16,8,4,124,0,0,0,0],
    "91":[0,0,0,0,0,56,8,8,8,8,8,56,0,0,0,0],
    "92":[0,0,0,0,0,0,4,8,16,32,64,0,0,0,0,0],
    "93":[0,0,0,0,0,56,32,32,32,32,32,56,0,0,0,0],
    "95":[0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,0],
    "97":[0,0,0,0,0,0,0,56,64,120,68,120,0,0,0,0],
    "98":[0,0,0,0,0,4,4,52,76,68,68,60,0,0,0,0],
    "99":[0,0,0,0,0,0,0,56,68,4,68,56,0,0,0,0],
    "100":[0,0,0,0,0,64,64,88,100,68,68,120,0,0,0,0],
    "101":[0,0,0,0,0,0,0,56,68,124,4,56,0,0,0,0],
    "102":[0,0,0,0,0,32,80,16,56,16,16,16,0,0,0,0],
    "103":[0,0,0,0,0,0,88,100,100,88,64,56,0,0,0,0],
    "104":[0,0,0,0,0,4,4,52,76,68,68,68,0,0,0,0],
    "105":[0,0,0,0,0,16,0,24,16,16,16,56,0,0,0,0],
    "106":[0,0,0,0,0,64,0,96,64,64,72,48,0,0,0,0],
    "107":[0,0,0,0,0,8,8,72,40,24,40,72,0,0,0,0],
    "108":[0,0,0,0,0,24,16,16,16,16,16,56,0,0,0,0],
    "109":[0,0,0,0,0,0,0,44,84,84,84,84,0,0,0,0],
    "110":[0,0,0,0,0,0,0,52,76,68,68,68,0,0,0,0],
    "111":[0,0,0,0,0,0,0,56,68,68,68,56,0,0,0,0],
    "112":[0,0,0,0,0,0,52,76,76,52,4,4,0,0,0,0],
    "113":[0,0,0,0,0,0,88,100,100,88,64,64,0,0,0,0],
    "114":[0,0,0,0,0,0,0,52,76,4,4,4,0,0,0,0],
    "115":[0,0,0,0,0,0,0,120,4,60,64,124,0,0,0,0],
    "116":[0,0,0,0,0,8,8,28,8,8,72,48,0,0,0,0],
    "117":[0,0,0,0,0,0,0,36,36,36,36,88,0,0,0,0],
    "118":[0,0,0,0,0,0,0,68,68,68,40,16,0,0,0,0],
    "119":[0,0,0,0,0,0,0,68,68,84,84,40,0,0,0,0],
    "120":[0,0,0,0,0,0,0,68,40,16,40,68,0,0,0,0],
    "121":[0,0,0,0,0,0,68,68,100,88,64,56,0,0,0,0],
    "122":[0,0,0,0,0,0,0,124,32,16,8,124,0,0,0,0],
    "126":[0,0,0,0,0,0,0,8,84,32,0,0,0,0,0,0],
    "name":"KurzweilK2500XS",
    "copy":"psobot",
    "letterspace":"64",
    "basefont_size":"512",
    "basefont_left":"62",
    "basefont_top":"0",
    "basefont":"Courier",
    "basefont2":""
}
"""
)


def draw_glyph(img, position, values, color):
    x, y = position

    for offset_y, value in enumerate(values):
        if value == 0:
            continue  # Skip row

        for offset_x, bit in enumerate([2**v for v in range(16)]):
            if value & bit:
                img.putpixel((x + offset_x, y + offset_y - 4), color)


def draw_text(img, position, text, color=None):
    x, y = position
    x -= 2
    y -= 1
    for index, value in enumerate(text):
        try:
            glyph = FONT[str(ord(value))]
        except KeyError:
            # if ord(value) != 32:
            #     print("no character in font for", str(ord(value)))
            continue

        glyph_pos = (x + (index * (GLYPH_SIZE[0] + 1)), y)
        glyph_center = (x + 2 + (index * (GLYPH_SIZE[0] + 1)), y + 1)
        _color = color
        if _color is None:
            bg_color = img.getpixel(glyph_center)
            _color = BLACK if bg_color[:3] == WHITE[:3] else WHITE
        draw_glyph(img, glyph_pos, glyph, _color)


def generate_image(graphics_layer: np.ndarray, text_rows: List[str]):
    img = Image.new("RGB", (x, y))
    draw = ImageDraw.Draw(img)

    if graphics_layer.shape[0] > graphics_layer.shape[1]:
        graphics_layer = graphics_layer.T

    # Use the Graphics Layer to draw the background first.
    for row_i, row in enumerate(graphics_layer):
        for col_i, pixel in enumerate(row):
            draw.rectangle(((col_i, row_i), (col_i + 1, row_i + 1)), fill=WHITE if pixel else BLACK)

    for i, row in enumerate(text_rows):
        draw_text(img, (1, i * 8), row)

    return img


def upscale_image(img, factor=4, spacing=1):
    upscaled = Image.new("RGB", (x * factor, y * factor))
    draw = ImageDraw.Draw(upscaled)
    draw.rectangle(((0, 0), (x * factor, y * factor)), fill=UPSCALE_BACKGROUND)
    for _x in range(0, x):
        for _y in range(0, y):
            pixel = img.getpixel((_x, _y))
            blended_pixel = tuple([(c + c + c + b) // 4 for c, b in zip(pixel, UPSCALE_BACKGROUND)])
            draw.rectangle(
                (
                    (_x * factor, _y * factor),
                    ((_x + 1) * factor - 1, (_y + 1) * factor - 1),
                ),
                fill=blended_pixel,
            )
            draw.rectangle(
                (
                    (_x * factor, _y * factor),
                    ((_x + 1) * factor - 1 - spacing, (_y + 1) * factor - 1 - spacing),
                ),
                fill=pixel,
            )
    return upscaled
